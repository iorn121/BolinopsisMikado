/*
Copyright © 2023 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"fmt"
	"image"
	_ "image/gif"
	_ "image/jpeg"
	_ "image/png"
	"os"
	"syscall"

	"github.com/nfnt/resize"
	"github.com/spf13/cobra"
	"golang.org/x/crypto/ssh/terminal"
)

// imgCmd represents the img command
var imgCmd = &cobra.Command{
	Use:   "img",
	Short: "convert image into ascii art",
	Long: `
Convert image into ascii art. args [path] after "img" are the path to the image file.
-c bool : Colored the ascii when output to the terminal (default true)
-p string : Image path to be convert (default "../img/BolinopsisMikado.jpg")`,
	Run: func(cmd *cobra.Command, args []string) {
		path, _ := cmd.Flags().GetString("path")
		if path == "" {
			printBolinopsisMikado()
		} else {
			colored, _ := cmd.Flags().GetBool("colored")
			width_term, height_term := getTerminalSize()
			width_img, height_img := getImageSize(path)
			var width, height int
			if width_term/width_img < height_term/height_img {
				width = width_term
				height = int(float64(width) / float64(width_img) * float64(height_img))
			} else {
				width = int(float64(height_term) / float64(height_img) * float64(width_img))
				height = height_term
			}
			convertImageToAscii(path, width, height, colored)
		}
	},
}

// convertImageToAscii convert image to ascii art
// path : path to the image file
// width : width of the ascii art
// height : height of the ascii art
// colored : colored the ascii when output to the terminal
func convertImageToAscii(path string, width int, height int, colored bool) {
	file, err := os.Open(path)
	if err != nil {
		fmt.Printf("Error : %+v", err)
		os.Exit(1)
	}
	defer file.Close()

	img, _, err := image.Decode(file)
	if err != nil {
		fmt.Printf("Error : %+v", err)
		os.Exit(1)
	}
	img_resized := resizeImage(img, width, height)

	ch := make(chan string)
	for i := 0; i < height; i++ {
		go convertLineToAscii(img_resized, i, colored, ch)
	}
	for i := 0; i < height; i++ {
		fmt.Println(<-ch)
	}
}

func convertLineToAscii(img image.Image, line int, colored bool, ch chan<- string) {
	var ascii string
	for i := 0; i < img.Bounds().Dx(); i++ {
		r, g, b, _ := img.At(i, line).RGBA()
		ascii += convertPixelToAscii(r, g, b, colored)
	}
	ch <- ascii
}

func convertPixelToAscii(r uint32, g uint32, b uint32, colored bool) string {
	var ascii string
	if colored {
		ascii = fmt.Sprintf("\033[38;2;%d;%d;%dm▇\033[0m", r/256, g/256, b/256)
	} else {
		ascii = fmt.Sprintf("\033[38;2;%d;%d;%dm▇\033[0m", 0, 0, 0)
	}
	return ascii
}

func resizeImage(img image.Image, width int, height int) image.Image {
	resized_img := resize.Resize(uint(width), uint(height), img, resize.Lanczos3)
	return resized_img
}

func getTerminalSize() (int, int) {
	var width int
	var height int
	var err error
	width, height, err = terminal.GetSize(syscall.Stdin)

	if err != nil {
		fmt.Printf("Error : %+v", err)
		os.Exit(1)
	}

	return width, height
}

func getImageSize(path string) (int, int) {
	file, err := os.Open(path)
	if err != nil {
		fmt.Printf("Error : %+v", err)
		os.Exit(1)
	}
	defer file.Close()

	img, _, err := image.Decode(file)
	if err != nil {
		fmt.Printf("Error : %+v", err)
		os.Exit(1)
	}

	return img.Bounds().Dx(), img.Bounds().Dy()
}

func init() {
	rootCmd.AddCommand(imgCmd)
	imgCmd.Flags().StringP("path", "p", "", "image path to convert")
	imgCmd.Flags().BoolP("colored", "c", true, "colored the ascii when output to the terminal")
}

func printBolinopsisMikado() {
	fmt.Println(`
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMNMNMNMNMNMNMNMNMNMNMNNMNNMNNMNNMNNMNNMNMNMNMNMNMNMNMNMNMNMNMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMNMNNMNNMNMNNMNNMNNNNMNMNNNMNMNNMNNMNMNNNMNNMNMNMNNMNNMNNMNNMNNMNMNNMMMMMMNMNMNMNMNNNMNNMNNMNNMNMNMNNMNNMNMNMMMMMMMMMMMMMM
MMMMMMMMNMMNMNMMMMNMMMNMMMNMMNMMNNNNMNMNMNNMNNMNNNNMNNMNNNMNNMNNNNNNMNNNMNMMMB8ZWkmmQWmQkMMM9TMNMNNMNNMNNMMNMNMMMMNMMNMNMNMNMNMMMMMMMMM
MMMMMMNMMMNMMNMNMMMNMMMNMMMNNMNMMMNMNMNMNNMNMNNMMNNMNMNMNNNNNNMMNMMNNMNMM8CjgdHH###H#HHHM8wQQdMNNNMMMNMMNMMNMMNMNMMMMMMMNMMMMMNMMNMMMMM
MMNMMNMMNMMNMMNMNMMNMNMNNNMNMNNNNMNMNNNNMNNMNNMNNNMNNNMNMMNMMNNNNNNNNMMOQdMHH#MM##M##MMSXkkHMWHHM#MMNMNNMNNMNNMMNMNMNMNMMNMNNMMMMMMNMMM
MMMMMMMMNMMNMMMMNMNMMMNMMNNMNMMNMNNMNMNMNMNNMNNMNNMNMNNNNNNNNNMNMNM@3udHNHHMH####HMMMHkQMNdMMHMNMXMRMNMNNMNMNMNMMNMNMMMNMMNMMNMNMMMMMMN
MMMNMNMNMNMMNNMNMMMNNMNMNMNMNNMNMNNMNNMNNNNNMNNMNNNNNNNNNNNNNNNNM8+gHHHHHHH##HHHHHMMWHMHMWMMHMMHMXHWHHMNMNMNMNNNMNMMNMNMMNMMMNMMNMNMMNM
MMMMMNMMMNMMMMNMMNMMNNMNNMNNMNNMNNMNNMNNMMNMNNNNNMNNMNMNMNMNMMB3udMHHHHHHMMHHHHHMM5XHMHHbXHHMHMWMdHWHNWNMNNMNMNMNMNMNMMNMMMNMMNMMNMMMMM
MMNMMMNMNMNMNMMNMNNMMNNMNNMNMNNMNNMNMNNMNNMNNMNNNNNNNNNNNMN#5(gWMHHHHHHHHHHHHHHMHwXWMMHHWMgMHHMM8dNHNHNVMMMNNMNNMNMNMMNMNMMNMNMNMMMNMMM
MNMMNMMNMMMNMMNMNMNNMNMNMMNMNNMNNMNNNMNNNNNNNNMNNMNNMNNNNM83gHHHMHHH@@HH@H@HHHMHkHHHHH#HdMMMHHHYOXWHMHNNdNMNMNMNNMNNNMMNMMNMMMNMNMNMMNM
MMNMNMMNMMNMMNMNMMNMNNMNNMNNMNNMNNMNNNMNNNNNNNNNNNMNNMMMYjdH@HHHHHMH@HNHHHHHMHXHHHHHHHM-?H#HHMMGXHHHHHHHRW#MNMNMNNMMNNMNMMNMMMMMMNMMNMM
MMMNMNMMMNMMNMMNNNMNMNNMNNMNNMNNMNNMNNNNMNMNMNNMNNNNNB=jdH@HHMMHH@M@HHHHHHHM6JWVH@HHM@DJHHHHHMWKOXHHHH#HNdMdMNNMMNNMNMNNNMMNNMNMMNMMNMM
NMNMMMNMNMMNMNNMNMNNMMNMNMNNMNNMNNNNNMNNNNNNNNNNMNM#3uXH@HHHHHHHHHHH@MHHH@MhJWSHMHMMMSQHHMMHHzV1dHHHMHH#NOMXMNNNMNMNMNMNMNMMMNMNMMNMMNM
MNMMNMMNMMNMNMMNMNMMNNNNNMNNMNNNMNNNNNNMNNNMNNMNMT1jdH@HHHHN@MHHHHHHMHNHMMYHHHW@HMHMSXMMNHHMDx<dH@HHNHHMMjHRNMNNNMNNMNNMNMNNMMNMMNMNMMN
MMNMMNMMMNMNMNNMNNNNNMNMNNMNNMNNNNMNMNNNNMNNNMM=11dH@@H@H@@@@HkkHHHHHHH@#3W@NW@HMHM6d@MHHHM9c<jHHHHHM##MHjMRMNMNMNNMNMNMNNMMNMMNMMNMMNM
MNMMNMMNMNMNNMNNMMNMMNMNNNMNNNNMNNNNNNMNNNMNMBhIjWgH@H@@@MBWXQkHH@HHMM@#>jHHWHMHWNDd@HHHHM8I<jHHHHHHHMHHMdHKMNNMNNMNMNMNMNMNMNMMNMMNMMM
MMMNMMNMNMNMNMNMNNMNNNMNNMNMNNNNNMNNNNNNNNMTQW0dW@d@@@@M8dpH@@HNW@HHH@MK&H@HWHH@HDdHHHHHM9v<dMHHHHHH#HHNRjHKMMNNMNNMNNMNNMNNMNNMMNMMNMN
NMNMMNMMNMMNMNMNMNNNMNNMNNMNNMNNNNMNMNNMMMlJBCdH@@@XHHWnwgQyMH@NH@@@H@HdH@HHWgmHDdH@HHMH6<+dHHHHHH##MMHHbdHDMNMNNMNNMNNMNMNMNMMNMMNMMNM
MMMNMMNMMNNNMNNMNNMNNMNNMNNNNNMNNNNNNNMNMXXS1dHgggHSZQRXH@HX@HMH@@MW@B(d@HXHqHH$dH@HHMKIluWHHHH###MHHNHHFdH6MMNMNNMNNMMNMNMNNMNMNMMNMMM
MNMMNMNNMNMNNMNMNNMNNNMNNMNNMNNNMNNMNNM#(HS1dWmgWSXSdWdHmHXH@@MWH@@HHydWSdWHHmSXkHgWM9zzXMHHNM##H##HMMH@3dMjNNNNMNNMNNNMNNMNMNNMMNMMNMM
MNMMNMMMNNMMNMMNNMNMNMNNNNNNNNNNNNNNNMt(mK1dkmHH6XwfXSWHmWH@@@HWHHgH9dWHWqkHmzWHkqHHSzXWHHHHHN#H####HHHMjXDdNMNNMNNMNNMNNMNMNMNNMMNMMNM
MMNMMNMNNMNNMNNNMNNNNMNMNNMNNMNMNNMNM@(qHIdbHWH6dkWpXOXWKWW@@@@HggHYjXHHHkHHSWHkqHHGXWHMNMMHH#H#HHHHHHH@(H$dNNMNNMNNMNNMNMNNMNMMNNMMNMM
MMNMNMNNMNMNMNNMNNMNNNNNMNNNMNNNNMNN#jkHzdkWWHDjfyppSOWWWHH@H@@HWH6zXXHHkHHSdgHkH0XkW@HHHHHHHH#HHHHHHH@tdHJMNNNMNNNMNNMNMNMNNMNMMNMMNMM
MNMMMNMMNMNMNMNNNMNMMNMNNNNNNNNNNNM6(H01jWHWmK(WWXXWIdfXWHHgg@@HSXWkJWbkqHZWgHWHYQHH@HHHHHHHHMMMMMM@NMd(XDdNNNNNMNMNNMNNNMNMNNNNMMNMMNM
MNMNMNNMNNMNNMMNNMNNNMNNNMNNMNNMNNEjH0ZdWkWHHt(XyXXXOXWSHggg@W@WHkUXXdpk9vdgHpW6dM@@HHHH@HH@HqHqWWWH@@KjWnMNNMNNNMNNNNNMNNMNMMNMNMNMMNM
MMNMNMMNMNNMNNMMNNMNNNMNNNNNNNMNM#jHd0dWkHmmH(zwXXV0dWWXW@HHg@#qHgSXyk4SwWgHpW0dHHHMH@@H@@XHWHgHUWmHH@tzKjMNNNNNNNMNNMMNNMNNMNMNMNMMNMM
MNMMNMNMNMNMMNNNNMNMNMNNNNMNNNNMBjWXCdpbkWqHr(wuVXXOdpRWHHH@@gHHHHXXXWIdWHHkHSJwq@g@@@@MHHQdHHHW04mHHH(WfdNNMNNMNNNMNMNNMNMNNMNMNMNMMNM
MMNMMNMNNMNNMNNNMNNNMNNNMNNMNNMFjyVIdWkkmkqHtjwd0ZIOXkWWHHg@@HWgHXWWHIwXHHWHWWWHggHHHHHWWHgKddbWCJgdXD(WdMNNNNNNMMNNNNNMNNMMNNMNMNMMNMM
MNMMNMNMNNMMNNMNNNNMNNNNNNNNNMM1dW0dpWHqqmqH1zuXSZzOWHdWmW@ggHHqSXWH0wwXHWWWHWmH@@gHWkWXggHX0WW$jmkHW%w$MNNMNNMNNNMNNMNNMNNMNMNMMNMNMMN
MMNMMNMMNMNMNMNNMNNMNNMNNMNNMM>wX0dWkkWWqHX0<zrXIO<OXSXWqH@@HWHSXWKCwXVWbW9WWggHHHWWHWWkbWSyIZuXHmWHH.v(MNNNNNNNNMNNMNMNMNMNNMNNMNMMNMM
MNMMNMNNMNNNMNNMNMNNMNNNNNNMMCOZzJWKHHybkHW1++z11tz?ZZXWkWHH$W0jWK>'jXXWWdHHHHWWkbKWXkpW0Z0XuWHWHdKH}(jMNNMNNMNNNNMNNMNMNNMNMNMNNMNMMNM
MMNMMNMNNMMNMNMNNMNNMNMNNMNN8d01ufVWkWWkH0Czlz=1+tzz(<1XUdV3dSdgY>(IXVGWWkQWgggmHWXHHHfWXwwwXgd@gHHH_(MNNNNNMNNMNMNNNMNNNMNMNNMNMMNMMNM
MNMNMMNMMNNMNMNNNMNNNMNNNMMDJO1dfSwgXbVWSZ1llzOwwXXkXoAkKWRdHRx~ JGf1wXWggH@@gHWXWWWWUXXXXXW@@@@gHH3(MNNNMNNNNNNMNMNNNMNMNMNNMNMNMMNMMM
MMNMNMNNNMNNMNNMNNMNNMNNNN@jw1dUWWXUSXUwC1+tOuwXWWHgHdH@N#dHkZo.dVOwXXXHg@@HHQHHWXZZ0wwXVwWWHH@HWH%.MNNNNNNMNNMNNNMNNMNNNMNMNMNNMNMMNMN
MMMMMNMMNNMNMNMNMNNMNNMNM#(zIdpU0WWWUCz11z+OwXWWHHHHMd@MMMNMNHkVGXVkuXwHgHWdHkHUZXXVwuVGkXWWHWHWHt(MNNMNNMNNNNNMNNNMNNMMNNMNMNMMNMNMMMM
NMNNMMNMNMNMNMNNNMNNMNNNMtwZkdWTXw0Zl1+zvOdXXWHH@HHMNHMMMNNNNMXgHkkWW2OwWHHkHVSXXOOrvGXXHgHgHWqW3.MNNNNNNNNNMNNNMNNMNNNNMMNNMNNMMNMNMNM
MMNMMNMNMNNMNMMNMNMNNMMBww00wwXZC?l1+1rwwXWHH@HHHHHHNHMMNNNMMdHM@MMNNksXWWWyWXzZOrCjeWm#WHkHHXHC(MNNNNMNNMNNNMNMNNMNNMNNMNNMNMNNMMMMNMM
MNMMNMMNMNMNNNMNNMNNMNBXWfWkXI(1+1+yAQWdg@@@HHHHHHHHMNNNMNNNHMHM####HHHOzXXzuvrv<jdqqHHHqRXHHY(dNNNMNNNNMNNNNNMNNMNMNMNMNMNMNMMMNMNMMNM
MMMNMMNMNMMNMNNMNNMNN#mXUU0O1?++OAXWH@@@@@HHHHH@MMMNNNNNNMMM#H#######MH3<+OOO7<(JGHWHmmqWHWH/(MMNNMNNNNNNNMNNMNNMNNNMNMNMNMNNMNMMNMMNMM
NMNMMNMMNMNMNMMNMNNMMHKWVIi+JdXXWmm@@@HHHHHHHHHMMMNNNNMNNMMHM#######HHhfAz+<~(jXHWgmWHHWkkH$(MNNNNNNNMNMNNNMNNMNNMNMNNMNNMNNMNMNMMNMMMM
MMNMMNMMNMNNMNNMNMNNNWKwzwwXWWHg@@@@@HH@HH@HH@MMNNNNNMNNNHHMH#M#HMH#MHHWVvZ1zOXWHWHXqHHdHWV(MNNNMNNMNNNNNNMNNMNNMNMNNMNMNNMMNMNMMNMMNNM
MNMMNMMNMMMNMNNMNNMNMNIzuXWWmg@@@@@HH@@H@HMMMNNNNNNMNNNMNHMM####HH#MHHHWVC+XZdWkqHWRWSbHWV(MNNNNNNNNNNMNNMNNMNNMNNNMNNMNMNNMMNMMNMMNMMN
MMNMMMNMMNMMNMNNMNMMNMNmUHHHHHHHHHgM@HMNMNNNNNNNNNMNNNMMHHM##H###HMHHHWXZjXZzXUk4WWHHH0XC(MNNNMNNMNNMNNMNNMNNMNNMMNMMNNMNMMNMMNMMMNMMMM
MNMNMNMMNMNMMNMMNMNNNNNNNMNNNNNMMNNNNNNNNNNNNNNMNNNNNNNNMM##NM##HMWHHMS0zZVWZXdkkkHkkH0c(NNNNNNMNNNNNNNMNNNNMNMNNMNNMNMNNMNMMNMNMNMMNNM
		`)
}
